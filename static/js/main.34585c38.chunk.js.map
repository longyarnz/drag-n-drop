{"version":3,"sources":["components/AddButton.js","components/ListHeader.js","components/ListCard.js","components/List.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AddButton","active","onClick","style","color","className","ListHeader","props","title","PhotoStack","images","remainder","length","list","listView","src","i","key","alt","append","CreateTaskCard","finish","dispatch","textArea","useRef","useEffect","current","focus","ref","placeholder","onKeyDown","e","keyCode","shiftKey","preventDefault","task","desc","target","value","dueDate","Math","floor","random","id","type","ListCard","index","draggableId","provided","snapshot","innerRef","draggableProps","dragHandleProps","List","useState","isCreating","setIsCreating","store","state","toggle","onDragOverStyle","background","if","droppableId","isDraggingOver","card","initialState","Backlog","Todo","Done","reducer","action","newList","concat","context","source","destination","splice","dragged","from","to","App","useReducer","listTitles","Object","keys","onDragEnd","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAEe,SAASA,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QACpCC,EAAQ,CACZC,MAAOH,EAAS,MAAQ,MAG1B,OACE,4BAAQI,UAAU,aAAaH,QAASA,GACtC,uBAAGG,UAAU,iBAAiBF,MAAOA,GAClCF,EAAS,SAAW,QCRd,SAASK,EAAWC,GAAQ,IACjCC,EAAUD,EAAVC,MAER,OACE,4BAAQH,UAAU,eAChB,4BAAKG,GACL,uBAAGH,UAAU,kBAAb,eCJN,SAASI,IACP,IAAMC,EAAS,CAAC,YAAa,YAAa,YAAa,YAAa,aAC9DC,EAAYD,EAAOE,OAAS,EAElC,OACE,yBAAKP,UAAU,eACb,kBAAC,WAAD,CACEQ,KAAMH,EACNI,SAAU,SAACC,EAAKC,GAAN,OACR,yBAAKC,IAAKD,EAAGD,IAAKA,EAAKG,IAAI,oBAE7BC,OAAQR,GACN,0BAAMM,IAAI,SAASZ,UAAU,aAA7B,IAA2CM,MAO9C,SAASS,EAAeb,GAAQ,IAC7Bc,EAA2Bd,EAA3Bc,OAAQR,EAAmBN,EAAnBM,KAAMS,EAAaf,EAAbe,SAChBC,EAAWC,mBAEjBC,qBAAU,WACRF,EAASG,QAAQC,UAChB,IAyBH,OACE,yBAAKtB,UAAU,aACb,8BAAUuB,IAAKL,EAAUM,YAAY,WAAWC,UAzBjC,SAAAC,GACjB,GAAkB,KAAdA,EAAEC,UAAmBD,EAAEE,SAAU,CACnCF,EAAEG,iBADiC,IAM7BC,EAAO,CACXC,KAJgBL,EAAEM,OAAZC,MAKNC,QAAQ,OAAD,OAJkBC,KAAKC,MAAsB,GAAhBD,KAAKE,WAKzCC,GAAG,GAAD,OAAKH,KAAKE,WAQdpB,EALe,CACbT,OAAMsB,OACNS,KAAM,gBAIRvB,SAWS,SAASwB,EAAStC,GAAQ,IAC/B6B,EAA6B7B,EAA7B6B,KAAMG,EAAuBhC,EAAvBgC,QAASO,EAAcvC,EAAduC,MAAOH,EAAOpC,EAAPoC,GAE9B,OACE,kBAAC,IAAD,CAAWI,YAAaJ,EAAIG,MAAOA,IAChC,SAACE,EAAUC,GAAX,OACC,uCACE5C,UAAU,YACVuB,IAAKoB,EAASE,UACVF,EAASG,eACTH,EAASI,gBAJf,CAKEjD,MAAO6C,EAASG,eAAehD,QAE/B,6BACE,8BAAOiC,GACP,uBAAG/B,UAAU,kBAAb,eAGF,6BACE,uBAAGA,UAAU,kBAAb,YACA,qCAAWkC,GACX,kBAAC9B,EAAD,WC1EG,SAAS4C,EAAK9C,GAAQ,IAAD,EACE+C,oBAAS,GADX,mBAC3BC,EAD2B,KACfC,EADe,KAE1BhD,EAAiBD,EAAjBC,MAAOiD,EAAUlD,EAAVkD,MAFmB,cAGRA,EAHQ,GAG3BC,EAH2B,KAGpBpC,EAHoB,KAI5BqC,EAAS,kBAAMH,GAAeD,IAC9BK,EAAkB,CACtBC,WAAY,2BAGd,OACE,yBAAKxD,UAAU,WACb,kBAACC,EAAD,CAAYE,MAAOA,IAEnB,kBAACR,EAAD,CAAWC,OAAQsD,EAAYrD,QAASyD,IAExC,kBAAC,IAAD,CAAcG,GAAIP,GAChB,kBAACnC,EAAD,CACEC,OAAQsC,EACR9C,KAAML,EACNc,SAAUA,KAId,kBAAC,IAAD,CAAWyC,YAAavD,IACrB,SAACwC,EAAUC,GAAX,OACC,yBACE5C,UAAU,cACVuB,IAAKoB,EAASE,SACd/C,MAAO8C,EAASe,eAAiBJ,EAAkB,MAEnD,kBAAC,WAAD,CACE/C,KAAM6C,EAAMlD,GACZM,SAAU,SAACmD,EAAMnB,GAAP,OACR,kBAACD,EAAD,CACEF,GAAIsB,EAAKtB,GACT1B,IAAKgD,EAAKtB,GACVG,MAAOA,EACPV,KAAM6B,EAAK7B,KACXG,QAAS0B,EAAK1B,aAInBS,EAASnB,iB,yBClDTqC,EAAe,CAC1BC,QAAS,GACTC,KAAM,GACN,cAAe,GACf,YAAa,GACbC,KAAM,IAGD,SAASC,EAAQZ,EAAOa,GAC7B,OAAQA,EAAO3B,MACb,IAAK,cAAL,IACU/B,EAAe0D,EAAf1D,KAAMsB,EAASoC,EAATpC,KACRqC,EAAUd,EAAM7C,GAAM4D,OAAOtC,GACnC,OAAO,eAAKuB,EAAZ,eAAoB7C,EAAO2D,IAE7B,IAAK,eAAL,MAC6CD,EAApCG,QAAWC,EADpB,EACoBA,OAAQC,EAD5B,EAC4BA,YAC1B,GAAKA,EAEA,IAAID,EAAOZ,cAAgBa,EAAYb,YAAa,CACvD,IAAMlD,EAAI,YAAO6C,EAAMiB,EAAOZ,cADyB,EAErClD,EAAKgE,OAAOF,EAAO7B,MAAO,GAArCgC,EAFgD,oBAIvD,OADAjE,EAAKgE,OAAOD,EAAY9B,MAAO,EAAGgC,GAC3B,eAAKpB,EAAZ,eAAoBiB,EAAOZ,YAAclD,IAGrC,IAAD,EACGkE,EAAI,YAAOrB,EAAMiB,EAAOZ,cACxBiB,EAAE,YAAOtB,EAAMkB,EAAYb,cAF9B,EAGegB,EAAKF,OAAOF,EAAO7B,MAAO,GAArCgC,EAHJ,oBAKH,OADAE,EAAGH,OAAOD,EAAY9B,MAAO,EAAGgC,GACzB,eAAKpB,GAAZ,mBAAoBiB,EAAOZ,YAAcgB,GAAzC,cAAgDH,EAAYb,YAAciB,GAA1E,IAdgB,OAAOtB,EAiB3B,QACE,OAAOA,G,MCHEuB,MAzBf,WACE,IAAMxB,EAAQyB,qBAAWZ,EAASJ,GAC5BiB,EAAaC,OAAOC,KAAK5B,EAAM,IASrC,OACE,kBAAC,IAAD,CAAiB6B,UATE,SAAAZ,IAEnBpD,EAF8B,YACTmC,EADS,OAErB,CACPiB,UACA9B,KAAM,mBAMN,yBAAKvC,UAAU,OACb,kBAAC,WAAD,CACEQ,KAAMsE,EACNrE,SAAU,SAACN,EAAOsC,GAAR,OACR,kBAACO,EAAD,CAAMpC,IAAK6B,EAAOtC,MAAOA,EAAOiD,MAAOA,UCZ/B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.34585c38.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function AddButton({ active, onClick }) {\r\n  const style = {\r\n    color: active ? 'red' : null\r\n  }\r\n\r\n  return (\r\n    <button className=\"add-button\" onClick={onClick}>\r\n      <i className=\"material-icons\" style={style}>\r\n        {active ? 'remove' : 'add'}\r\n      </i>\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ListHeader(props) {\r\n  const { title } = props;\r\n\r\n  return (\r\n    <header className=\"list-header\">\r\n      <h4>{title}</h4> \r\n      <i className=\"material-icons\">more_horiz</i>\r\n    </header>\r\n  )\r\n}\r\n","import React, { useRef, useEffect} from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FlatList } from '@bit/lekanmedia.shared-ui.internal.utils'\r\n\r\nfunction PhotoStack() {\r\n  const images = ['/head.png', '/head.png', '/head.png', '/head.png', '/head.png'];\r\n  const remainder = images.length % 4;\r\n\r\n  return (\r\n    <div className=\"photo-stack\">\r\n      <FlatList\r\n        list={images}\r\n        listView={(src, i) => (\r\n          <img key={i} src={src} alt=\"task executors\" />\r\n        )}\r\n        append={remainder && (\r\n          <span key=\"append\" className=\"remainder\">+{remainder}</span>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CreateTaskCard(props) {\r\n  const { finish, list, dispatch } = props;\r\n  const textArea = useRef();\r\n\r\n  useEffect(() => {\r\n    textArea.current.focus();\r\n  }, []);\r\n\r\n  const createTask = e => {\r\n    if (e.keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n\r\n      const { value } = e.target;\r\n      const getRandomDay = () => Math.floor(Math.random() * 31);\r\n\r\n      const task = {\r\n        desc: value,\r\n        dueDate: `Aug ${getRandomDay()}`,\r\n        id: `${Math.random()}`\r\n      }\r\n\r\n      const action = {\r\n        list, task,\r\n        type: 'CREATE_TASK',\r\n      }\r\n\r\n      dispatch(action);\r\n      finish();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"list-card\">\r\n      <textarea ref={textArea} placeholder=\"New task\" onKeyDown={createTask} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function ListCard(props) {\r\n  const { desc, dueDate, index, id } = props;\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          className=\"list-card\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          style={provided.draggableProps.style}\r\n        >\r\n          <div>\r\n            <span>{desc}</span>\r\n            <i className=\"material-icons\">more_horiz</i>\r\n          </div>\r\n\r\n          <div>\r\n            <i className=\"material-icons\">schedule</i>\r\n            <span>Due {dueDate}</span>\r\n            <PhotoStack />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport ShouldRender from '@bit/lekanmedia.shared-ui.internal.should-render';\r\nimport AddButton from './AddButton';\r\nimport ListHeader from './ListHeader';\r\nimport ListCard, { CreateTaskCard } from './ListCard';\r\nimport { FlatList } from '@bit/lekanmedia.shared-ui.internal.utils';\r\n\r\nexport default function List(props) {\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const { title, store } = props;\r\n  const [state, dispatch] = store;\r\n  const toggle = () => setIsCreating(!isCreating);\r\n  const onDragOverStyle = {\r\n    background: 'rgba(229, 229, 229, .8)',\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <ListHeader title={title} />\r\n\r\n      <AddButton active={isCreating} onClick={toggle} />\r\n\r\n      <ShouldRender if={isCreating}>\r\n        <CreateTaskCard\r\n          finish={toggle}\r\n          list={title}\r\n          dispatch={dispatch}\r\n        />\r\n      </ShouldRender>\r\n\r\n      <Droppable droppableId={title}>\r\n        {(provided, snapshot) => (\r\n          <div\r\n            className=\"drop-region\"\r\n            ref={provided.innerRef}\r\n            style={snapshot.isDraggingOver ? onDragOverStyle : null}\r\n          >\r\n            <FlatList\r\n              list={state[title]}\r\n              listView={(card, index) => (\r\n                <ListCard\r\n                  id={card.id}\r\n                  key={card.id}\r\n                  index={index}\r\n                  desc={card.desc}\r\n                  dueDate={card.dueDate}\r\n                />\r\n              )}\r\n            />\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  )\r\n}\r\n","export const initialState = {\r\n  Backlog: [],\r\n  Todo: [],\r\n  'In Progress': [],\r\n  'In Review': [],\r\n  Done: []\r\n}\r\n\r\nexport function reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CREATE_TASK':\r\n      const { list, task } = action;\r\n      const newList = state[list].concat(task);\r\n      return { ...state, [list]: newList };\r\n\r\n    case 'SHUFFLE_LIST':\r\n      const {context: { source, destination }} = action;\r\n      if (!destination) return state;\r\n\r\n      else if (source.droppableId === destination.droppableId) {\r\n        const list = [...state[source.droppableId]];\r\n        const [dragged] = list.splice(source.index, 1);\r\n        list.splice(destination.index, 0, dragged);\r\n        return { ...state, [source.droppableId]: list }\r\n      }\r\n      \r\n      else {\r\n        const from = [...state[source.droppableId]];\r\n        const to = [...state[destination.droppableId]];\r\n        const [dragged] = from.splice(source.index, 1);\r\n        to.splice(destination.index, 0, dragged);\r\n        return { ...state, [source.droppableId]: from, [destination.droppableId]: to}\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { useReducer } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { FlatList } from '@bit/lekanmedia.shared-ui.internal.utils';\nimport List from './components/List';\nimport { reducer, initialState } from './store'\nimport './App.css';\n\nfunction App() {\n  const store = useReducer(reducer, initialState);\n  const listTitles = Object.keys(store[0]);\n  const shuffleState = context => {\n    const [, dispatch] = store;\n    dispatch({\n      context,\n      type: 'SHUFFLE_LIST',\n    });\n  }\n\n  return (\n    <DragDropContext onDragEnd={shuffleState}>\n      <div className=\"App\">\n        <FlatList\n          list={listTitles}\n          listView={(title, index) => (\n            <List key={index} title={title} store={store} />\n          )}\n        />\n      </div>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}